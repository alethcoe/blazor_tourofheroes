@inject IHeroService client;
@inject IMessagingService _MessagingService;
@inject NavigationManager NavigationManager
@page "/heroes"

<h2>My Heroes</h2>
@if (heroes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul class="heroes">
        @foreach (var hero in heroes)
        {
            <li @onclick="@(() => OnSelect(hero))">
                <span class="badge" >@hero.Id</span> @hero.Name
            </li>
        }
    </ul>
}


@* <HeroDetail SelectedHero=@SelectedHero></HeroDetail> *@

@code{
    private Hero[] heroes;

    protected override async Task OnInitializedAsync()
    {
          heroes = await client.GetHeroes();
    }

    private async Task OnSelect(Hero hero){
        await _MessagingService.Add($"Hero selected {hero.Name}");
        NavigationManager.NavigateTo("/herodetail/" + hero.Name);
    }
}

<style>
    /* HeroesComponent's private CSS styles */
.heroes {
  margin: 0 0 2em 0;
  list-style-type: none;
  padding: 0;
  width: 15em;
}
.heroes li {
  cursor: pointer;
  position: relative;
  left: 0;
  background-color: #EEE;
  margin: .5em;
  padding: .3em 0;
  height: 1.6em;
  border-radius: 4px;
}
.heroes li:hover {
  color: #607D8B;
  background-color: #DDD;
  left: .1em;
}
.heroes li.selected {
  background-color: #CFD8DC;
  color: white;
}
.heroes li.selected:hover {
  background-color: #BBD8DC;
  color: white;
}
.heroes .badge {
  display: inline-block;
  font-size: small;
  color: white;
  padding: 0.8em 0.7em 0 0.7em;
  background-color:#405061;
  line-height: 1em;
  position: relative;
  left: -1px;
  top: -4px;
  height: 1.8em;
  margin-right: .8em;
  border-radius: 4px 0 0 4px;
}
</style>